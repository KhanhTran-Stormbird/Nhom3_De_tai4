import { db } from "../config/db";
import type { RowDataPacket } from "mysql2";
import type { ResultSetHeader } from "mysql2/promise";

export const authController = {
  getUserByEmailAndPassword: async (email: string, password: string) => {
    const [rows] = await db.execute<RowDataPacket[]>(
      "SELECT * FROM NGUOI_DUNG WHERE email = ? AND password = ? LIMIT 1",
      [email, password]
    );

    return rows.length > 0 ? rows[0] : null;
  },

  async getUserByEmail(email: string) { // üõ†Ô∏è Th√™m h√†m n√†y
    const [rows] = await db.execute<RowDataPacket[]>(
      "SELECT * FROM NGUOI_DUNG WHERE email = ? LIMIT 1",
      [email]
    );

    return rows.length ? rows[0] : null;
  },

  async changePassword(email: string, currentPassword: string, newPassword: string) {
    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i v√† m·∫≠t kh·∫©u hi·ªán t·∫°i ƒë√∫ng kh√¥ng
    const user = await authController.getUserByEmailAndPassword(email, currentPassword);
    if (!user) {
      return { success: false, message: "Email ho·∫∑c m·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng!" };
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    const [result] = await db.execute<ResultSetHeader>(
      "UPDATE NGUOI_DUNG SET password = ? WHERE email = ?",
      [newPassword, email]
    );

    if (result.affectedRows > 0) {
      return { success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" };
    }
    return { success: false, message: "Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u, vui l√≤ng th·ª≠ l·∫°i!" };
  }
};
